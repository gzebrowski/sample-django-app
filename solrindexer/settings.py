# -*- coding: utf-8 -*-

"""
Django settings for solrindexer project.

Generated by 'django-admin startproject' using Django 1.8.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_PATH = os.path.dirname(__file__)
path_join = lambda *p: os.path.join(*p).replace('\\', '/')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%90n6p+i%xcl2qt5_0j8g3wtk$ren7agq!dqb@m7_h41c2fh)#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# DEBUG = True

ALLOWED_HOSTS = ['*']

DRAW_TEXT_FONT = path_join(BASE_DIR, "fonts/arial.ttf")
AUTH_USER_MODEL = 'userprofile.ProfileUser'
# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'haystack',
    'indexer',
    'product',
    'collection',
    'specialoffers',
    'userprofile',
    'category',
    'treebeard',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'solrindexer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [path_join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.eggs.Loader',
)

WSGI_APPLICATION = 'solrindexer.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mydb',
        'USER': 'root',
        'PASSWORD': 'admin'
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(PROJECT_PATH, "../static"),
)

STATIC_ROOT = os.path.join(PROJECT_PATH, "../../static")

# MONGODB_CFG = {'DB': 'brandidentity', 'HOST': '10.128.36.86:27018'}
MONGODB_CFG = {'instances': {'default': {'DB': 'brandidentity', 'HOST': '10.10.10.10:27017'}}}
ALL_DB_INSTANCES = (('default', 'live'),)


SAFE_FILE_STORAGE = 'utils.local_storage.MyLocalStorage'
GLOBAL_FILE_STORAGE = 'utils.mogile_multistorage.MogileFSMultiStorage'

STORAGE_ROOT = '/home/imagetransfer/app_files'
UPLOAD_ROOT = STORAGE_ROOT + '/'
UPLOAD_URL = '/storage/'
SOLR_URL = {'default': "http://10.10.10.10:8983/solr/collection_new",
            'suggest': 'http://10.10.10.10:8983/solr/auto_suggest/select'}
PYTHON_PATH = os.path.abspath(os.path.join(BASE_DIR, '../venv/bin/python'))
DSH_PATH = '/usr/bin/dsh'
PYMONGO_SOURCE = {'args': ['10.10.10.10', 27017], 'kwargs': {},
                  'db': 'productdb', 'collection': 'production'}
IMAGEMAGIC_PATH = '/usr/bin/convert'
TASKLOGS_DIR = '/home/tasklogs/'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/solrindexer.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'solrindexer': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
    }
}
DISTRIBUTED_SERVERS = [{'id': '1', 'key': 'master', 'name': 'Master', 'url': '//test-dash.idikudi.com', 'IP': '10.10.10.11', 'weight': 5},
                       {'id': '2', 'key': 'dashboard2', 'name': 'Server1 [30GB/1GB]', 'url': '//test01-dash.idikudi.com', 'IP': '10.10.10.12', 'weight': 2}]
DISTRIBUTED_SERVER_ID = '1'

DISTRIBUTED_MOGILEFS_CONFIG = {
    'SERVERS': {
        'DEFAULT': {
            'URLS': ['//static01.trotylus.pl/storage/'],
            'TRACKERS': ['10.10.10.13:7001'],
            'DOMAIN': 'trotylus'
        },
        'SERVER_2': {
            'URLS': ['//static02.trotylus.pl/storage/'],
            'TRACKERS': ['10.10.10.14:7001'],
            'DOMAIN': 'trotylus'
        },
        'SERVER_3': {
            'URLS': ['//static03.trotylus.pl/storage/'],
            'TRACKERS': ['10.10.10.15:7001'],
            'DOMAIN': 'trotylus'
        },
    },
    'SLOTS': ['DEFAULT'] * 34 + ['SERVER_2'] * 33 + ['SERVER_3'] * 33,
}

try:
    from local_settings import *  # noqa
except ImportError:
    pass
else:
    try:
        apply_globals(globals())
    except NameError:
        pass
if MONGODB_CFG and MONGODB_CFG.get('ENABLED', True):
    from mongoengine import register_connection
    for instance in MONGODB_CFG.get('instances', []):
        register_connection(alias=instance, name=MONGODB_CFG['instances'][instance]['DB'],
                            host=MONGODB_CFG['instances'][instance]['HOST'])
